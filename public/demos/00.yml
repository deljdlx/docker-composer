services:

  docker-proxy:
    image: tecnativa/docker-socket-proxy
    container_name: docker-proxy
    ports:
      - "2375:2375"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - CONTAINERS=1 # üî• Active l'acc√®s aux containers

  monitor:
    # image: php:8.3-cli-alpine

    build:
      context: .
      dockerfile: ./resources/monitor/dockerfile

    container_name: monitor
    depends_on:
      - portainer
      - elasticsearch
      - kibana
      - api
      - traefik
    volumes:
      - monitor_www_data:/var/www/html
      - ./resources/monitor:/monitor
    working_dir: /provisioner
    entrypoint: ["sh", "/monitor/provision.sh"]
    environment:
      # - APP_ENV=${APP_ENV}
      - PORTAINER_ADMIN_USER
      - PORTAINER_ADMIN_PASSWORD
    ports: []
    labels:
      - docker-composer.category=Monitoring
      - "traefik.enable=true"

      # htpasswd -nbB admin-kibana kibana4adminP4ss0rd
      - "traefik.http.routers.monitor-https.rule=Host(`monitor.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.monitor-https.tls.certresolver=myresolver"
      - "traefik.http.routers.monitor-https.entrypoints=websecure"
      - "traefik.http.services.monitor.loadbalancer.server.port=80"



      - "traefik.http.routers.monitor-http.rule=Host(`monitor.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.monitor-http.entrypoints=web"
      - "traefik.http.services.monitor.loadbalancer.server.port=80"
    networks:
      - app-network


  # nocodb:
  #   image: nocodb/nocodb:latest
  #   container_name: nocodb
  #   volumes:
  #     - nocodb_data:/usr/app/data
  #   environment:
  #     - MYSQL_HOST
  #     - MYSQL_PORT
  #     - MYSQL_USER
  #     - MYSQL_PASSWORD
  #     - MYSQL_DATABASE
  #     - NC_AUTH_JWT_SECRET=${NOCODB_AUTH_JWT_SECRET} # Cl√© secr√®te pour s√©curiser l'authentification JWT
  #   ports:
  #     - "8082:8080" # Port de l'interface web de NocoDB (peut √™tre expos√© si n√©cessaire)
  #   depends_on:
  #     - mysql
  #     - api
  #   networks:
  #     - app-network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.nocodb.rule=Host(`nocodb.${HOST_DOMAIN_LOCAL}`)" # Route le trafic pour NocoDB
  #     - "traefik.http.services.nocodb.loadbalancer.server.port=8080" # D√©finit le port interne de NocoDB



  # nocodb:
  #   image: nocodb/nocodb:latest
  #   container_name: nocodb
  #   volumes:
  #     - nocodb_data:/usr/app/data
  #   environment:
  #     - MYSQL_HOST
  #     - MYSQL_PORT
  #     - MYSQL_USER
  #     - MYSQL_PASSWORD
  #     - MYSQL_DATABASE
  #     - NC_AUTH_JWT_SECRET=${NOCODB_AUTH_JWT_SECRET} # Cl√© secr√®te pour s√©curiser l'authentification JWT
  #   ports:
  #     - "8082:8080" # Port de l'interface web de NocoDB (peut √™tre expos√© si n√©cessaire)
  #   depends_on:
  #     - mysql
  #     - api
  #   networks:
  #     - app-network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.nocodb-https.rule=Host(`nocodb.${HOST_DOMAIN_PUBLIC}`)"
  #     - "traefik.http.routers.nocodb-https.tls.certresolver=myresolver"
  #     - "traefik.http.routers.nocodb-https.entrypoints=websecure"

  #     - "traefik.http.routers.nocodb-http.rule=Host(`nocodb.${HOST_DOMAIN_LOCAL}`)"
  #     - "traefik.http.routers.nocodb-http.entrypoints=web"



  directus:
    image: directus/directus:latest
    container_name: directus
    restart: always
    depends_on:
      - mysql
      - traefik
    environment:
      DB_CLIENT: 'mysql'
      DB_HOST: 'mysql'
      DB_PORT: '3306'
      DB_DATABASE: ${MYSQL_DATABASE}
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD}
      EXPORT_ENABLED: true
      EXPORT_STORAGE_LOCATION: 'local'

    volumes:
      - directus_uploads:/uploads
      - directus_extensions:/directus/extensions
      - ./__shared/directus:/directus/__shared
    networks:
      - app-network
    labels:
      - docker-composer.category=Tools

      - "traefik.enable=true"

      # HTTPS configuration
      - "traefik.http.routers.directus-https.rule=Host(`directus.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.directus-https.tls.certresolver=myresolver"
      - "traefik.http.routers.directus-https.entrypoints=websecure"
      - "traefik.http.services.directus.loadbalancer.server.port=8055"

      # HTTP fallback
      - "traefik.http.routers.directus-http.rule=Host(`directus.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.directus-http.entrypoints=web"
      - "traefik.http.services.directus.loadbalancer.server.port=8055"



  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - --api.insecure=false # D√©sactive le tableau de bord non s√©curis√©
      - --api.dashboard=true # Active le tableau de bord s√©curis√©
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.traefik.address=:8080 # Point d'entr√©e pour le tableau de bord
      - --log=true
      - --log.level=DEBUG

      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=deljdlx@gmail.com
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json

    labels:
      - docker-composer.category=System


      # generate password : htpasswd -nbB admin-traefic traefik4dminP4ssw0rd
      - "traefik.http.routers.traefik-dashboard-https.rule=Host(`traefik.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
      - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik-dashboard-https.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard-https.middlewares=auth-basic"
      - "traefik.http.middlewares.auth-basic.basicauth.users=admin-traefic:$$2y$$05$$90ttyuYkU/KYtNCYonAfKelEKxn0NqyXcHxVbuGEtsemTA2sHqPtW"

      - "traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.traefik-dashboard-http.service=api@internal"
      - "traefik.http.routers.traefik-dashboard-http.entrypoints=web"

    ports:
      - "80:80" # Redirige le trafic HTTP
      - "443:443" # Redirige le trafic HTTPS
      - "8080:8080" # Tableau de bord Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # N√©cessaire pour que Traefik interagisse avec Docker
      - traefik_data:/letsencrypt
    networks:
      - app-network


  # Ajout du service PostgreSQL
  # postgres:
  #   image: postgres:15
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: hoppscotch
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432" # Port par d√©faut de PostgreSQL
  #   networks:
  #     - app-network


  code-server:
    # image: code-server
    container_name: code-server
    build:
      context: .
      dockerfile: ./resources/code-server/dockerfile
    restart: always
    ports:
      - "7780:7780"

    depends_on:
      - traefik

    labels:
      - docker-composer.category=Tools


      - "traefik.enable=true"

      - "traefik.http.routers.code-server-https.rule=Host(`code-server.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.code-server-https.tls.certresolver=myresolver"
      - "traefik.http.routers.code-server-https.entrypoints=websecure"

      - "traefik.http.routers.code-server-http.rule=Host(`code-server.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.code-server-http.entrypoints=web"

    volumes:
      # share volume with the api container
      - api_www_data:/var/www/html
      - ./__shared/code-server/share:/home/code-server/.local/share/code-server
      - ./__shared/code-server/config:/home/code-server/.config/code-server
    networks:
      - app-network

  #==============================================================

  n8n:
    image: docker.n8n.io/n8nio/n8n
    container_name: n8n
    restart: always
    ports:
      - "5678:5678"
    depends_on:
      - traefik
    labels:
      - docker-composer.category=Tools
      - "traefik.enable=true"

      - "traefik.http.routers.n8n-https.rule=Host(`n8n.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.n8n-https.tls.certresolver=myresolver"
      - "traefik.http.routers.n8n-https.entrypoints=websecure"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

      - "traefik.http.routers.n8n-http.rule=Host(`n8n.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.n8n-http.entrypoints=web"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

      # old config from previous version
      # - traefik.enable=true
      # - traefik.http.routers.n8n.rule=Host(`n8n.{{DOMAIN_NAME}}`)
      # - traefik.http.routers.n8n.tls=true
      # - traefik.http.routers.n8n.entrypoints=web,websecure
      # - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      # - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      # - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      # - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      # - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      # - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      # - traefik.http.middlewares.n8n.headers.SSLHost={{DOMAIN_NAME}}
      # - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      # - traefik.http.middlewares.n8n.headers.STSPreload=true
      # - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - N8N_PORT=5678
      - N8N_HOST=n8n.${HOST_DOMAIN_PUBLIC}}
      - WEBHOOK_URL=https://n8n.${HOST_DOMAIN_PUBLIC}

      - N8N_BASIC_AUTH_ACTIVE=true               # Active l'authentification de base
      - N8N_BASIC_AUTH_USER=admin                # Nom d'utilisateur
      - N8N_BASIC_AUTH_PASSWORD=strong_password  # Mot de passe
      - N8N_AUTH_EXCLUDE_ENDPOINTS=healthz       # Exclut certains points de terminaison de l'authentification
      - N8N_USER_MANAGEMENT_DISABLED=false       # Active la gestion des utilisateurs
      - N8N_ADMIN_USER=admin_user                # Identifiant de l'admin
      - N8N_ADMIN_EMAIL=admin@example.com        # Email de l'admin
      - N8N_ADMIN_PASSWORD=very_strong_password  # Mot de passe pour l'admin

      # old config from previous version
      # - N8N_PROTOCOL={{HTTP_SCHEME}}
      # - NODE_ENV=production
      # - WEBHOOK_URL={{HTTP_SCHEME}}://n8n.{{DOMAIN_NAME}}
      # - GENERIC_TIMEZONE=Etc/UTC
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-network


  cron-ui:
    image: alseambusher/crontab-ui
    container_name: cron-ui
    ports: []
      # - "8085:8000"
    volumes:
      - crontab_data:/crontabs
    environment:
      - CRON_PATH=/crontabs
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - traefik
    labels:
      - docker-composer.category=Tools
      - "traefik.enable=true"

      # htpasswd -nbB admin cronUi4dminP4ssw0rd
      - "traefik.http.routers.crontab-ui-https.rule=Host(`crontab-ui.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.crontab-ui-https.tls.certresolver=myresolver"
      - "traefik.http.routers.crontab-ui-https.entrypoints=websecure"
      - "traefik.http.routers.crontab-ui-https.middlewares=crontab-ui-auth"
      - "traefik.http.middlewares.crontab-ui-auth.basicauth.users=admin:$$2y$$05$$AvkhBCYdOp.2T3BykeAt0.bxJmaHHk7rDwhHrYiSJ8Gf2Ce.GDF4y"

      - "traefik.http.routers.crontab-ui-http.rule=Host(`crontab-ui.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.crontab-ui-http.entrypoints=web"



  #==============================================================


  api:
    container_name: api
    build:
      context: .
      dockerfile: ./resources/api/dockerfile
    volumes:
      - api_www_data:/var/www/html
      # - ./__shared/api/html:/var/www/html
      - ./__shared/api:/__shared
      - ./resources/api/provision:/__provision
      - ./resources/api/entrypoint.sh:/root/entrypoint.sh
      - crontab_data:/var/spool/cron/crontabs

    entrypoint: ["sh", "/root/entrypoint.sh"]
    # ports:
    #   - "8070:80"
    depends_on:
      - mysql
      - elasticsearch
      - traefik

    environment:

      - APP_URL="http://${HOST_DOMAIN_LOCAL}" # Utilisation de la variable HOST_DOMAIN

      - API_GIT_BRANCH

      - PARTNER_NAME
      - APP_ENV
      - APP_URL

      - MYSQL_ROOT_HOST
      - MYSQL_PORT
      - MYSQL_HOST
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DATABASE

      - LOG_CHANNEL

      - CACHE_DRIVER
      - MEMCACHED_HOST

      - ELASTIC_HOST
      - ELASTIC_LOGS_INDEX
      - ELASTIC_USER
      - ELASTIC_PASSWORD
      - ELASTIC_CERTIFICATE_PATH

      - IDEMPOTENCY_ENABLED
      - IDEMPOTENCY_TTL

      - COMPANY_KYC_AUTOSUBMIT
      - COMPANY_REPRESENTATIVE_USER_IS_UBO

      - BLOCKCHAIN_ENVIRONMENT
      - BLOCKCHAIN_LOG_LEVEL
      - BLOCKCHAIN_PROXY_PARTNER
      - BLOCKCHAIN_PROXY_VERSION
      - BLOCKCHAIN_PRIVATE_KEY



      - MANGOPAY_API_URL
      - MANGOPAY_CLIENT_ID
      - MANGOPAY_CLIENT_PASSWORD

      - PECULE_API_URL
      - PECULE_API_VERSION
      - PECULE_API_URL_FULL

      - PECULE_API_ID
      - PECULE_API_KEY
    networks:
      - app-network

    labels:
      - docker-composer.category=API
      - "traefik.enable=true"

      - "traefik.http.routers.api-https.rule=Host(`api.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.api-https.tls.certresolver=myresolver"
      - "traefik.http.routers.api-https.entrypoints=websecure"

      - "traefik.http.routers.api-http.rule=Host(`api.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.api-http.entrypoints=web"
  # ==============================================================

  mysql:
    image: mariadb:10.6.4
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./resources/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - app-network
    labels:
      - docker-composer.category=API

  # ==============================================================

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports: []
    #   - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    networks:
      - app-network
    labels:
      - docker-composer.category=System


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports: []
    #   - "9090:9090"

    depends_on:
      - node-exporter
    volumes:
      - ./resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    labels:
      - docker-composer.category=System

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports: []
    #   - "3000:3000"
    # env_file:
    #   - .env
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - MYSQL_HOST
      - MYSQL_PORT
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DATABASE
      # - GF_INSTALL_PLUGINS=briangann-dynamictext-panel,briangann-businesscalendar-panel
      # - GF_INSTALL_PLUGINS=briangann-dynamictext-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./resources/grafana/provisioning:/etc/grafana/provisioning
      - ./resources/grafana/dashboards:/var/lib/grafana/dashboards

    depends_on:
      - prometheus
      - loki
      - cadvisor
      - traefik
    networks:
      - app-network
    labels:
      - docker-composer.category=API
      - "traefik.enable=true"
      - "traefik.http.routers.grafana-https.rule=Host(`grafana.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.grafana-https.tls.certresolver=myresolver"
      - "traefik.http.routers.grafana-https.entrypoints=websecure"

      - "traefik.http.routers.grafana-http.rule=Host(`grafana.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.grafana-http.entrypoints=web"

  # ==============================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports: []
    #   - "9100:9100"
    networks:
      - app-network
    labels:
      - docker-composer.category=System

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports: []
    #   - "3100:3100"
    volumes:
      - ./resources/loki/config:/etc/loki
    networks:
      - app-network
    labels:
      - docker-composer.category=System

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports: []
    depends_on:
      - loki
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./resources/promtail/config:/etc/promtail
    networks:
      - app-network
    command: -config.file=/etc/promtail/promtail.yml
    labels:
      - docker-composer.category=System



  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # D√©sactive la s√©curit√© pour simplifier la configuration initiale
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # - xpack.security.enabled=true # Active la s√©curit√©
      # - xpack.security.authc.api_key.enabled=true # Active les cl√©s API si n√©cessaire
      # - xpack.security.enrollment.enabled=true # Active l'inscription automatique
      # - ELASTIC_PASSWORD=${ELASTIC_PASSWORD} # Mot de passe pour le compte elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./resources/elasticsearch/init.sh:/usr/share/elasticsearch/init.sh
    # command: [ "/bin/bash", "-c", "/usr/share/elasticsearch/bin/elasticsearch & sleep 10 && /usr/share/elasticsearch/init.sh && wait" ]
    ports: []
    #   - "9200:9200"
    networks:
      - app-network
    labels:
      - docker-composer.category=System

    # ==============================================================

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      # - xpack.security.enabled=false # D√©sactive la s√©curit√© pour simplifier la configuration initiale
      # - ELASTICSEARCH_USERNAME=${ELASTIC_USER} # Nom d'utilisateur pour Elasticsearch
      # - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD} # Mot de passe d√©fini pour le compte elastic
      # - xpack.security.enabled=true # Active la s√©curit√© pour Kibana
      # - ELASTICSEARCH_API_KEY=cmVrZ0pKUUI0U1RuOWVsWGVJZUo6X1hFX2IyYVFRMkctT2VPd1VtME81QQ==
    depends_on:
      - elasticsearch
      - traefik
    networks:
      - app-network
    labels:
      - docker-composer.category=Monitoring

      - "traefik.enable=true"
      # htpasswd -nbB admin-kibana kibana4adminP4ss0rd
      - "traefik.http.routers.kibana-https.rule=Host(`kibana.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.kibana-https.tls.certresolver=myresolver"
      - "traefik.http.routers.kibana-https.entrypoints=websecure"
      - "traefik.http.routers.kibana-https.middlewares=kibana-auth"
      - "traefik.http.middlewares.kibana-auth.basicauth.users=admin-kibana:$$2y$$05$$AueHdMsnH0xodmWy8DP5beL3YIgDVS.7BTXsxZfktIzei3vMnyLh2"

      - "traefik.http.routers.kibana-http.rule=Host(`kibana.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.kibana-http.entrypoints=web"


      # Associe le middleware au routeur
  # ==============================================================

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    # entrypoint: ["/bin/bash", "/init-portainer.sh"]
    ports: []
      # - "9000:9000" # Interface web de Portainer
    environment:
      - ADMIN_USERNAME=${PORTAINER_ADMIN_USER} # Nom d'utilisateur admin
      - ADMIN_PASSWORD=${PORTAINER_ADMIN_PASSWORD} # Mot de passe pour l'utilisateur admin
    volumes:
      - ./resources/portainer/init.sh:/init-portainer.sh
      - /var/run/docker.sock:/var/run/docker.sock # Acc√®s au socket Docker
      - portainer_data:/data # Stockage des donn√©es Portainer
    networks:
      - app-network
    labels:
      - docker-composer.category=Monitoring
      - "traefik.enable=true"

      # htpasswd -nbB admin-kibana kibana4adminP4ss0rd
      - "traefik.http.routers.portainer-https.rule=Host(`portainer.${HOST_DOMAIN_PUBLIC}`)"
      - "traefik.http.routers.portainer-https.tls.certresolver=myresolver"
      - "traefik.http.routers.portainer-https.entrypoints=websecure"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"



      - "traefik.http.routers.portainer-http.rule=Host(`portainer.${HOST_DOMAIN_LOCAL}`)"
      - "traefik.http.routers.portainer-http.entrypoints=web"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    depends_on:
      - traefik



volumes:

  # nocodb_data:
  #   driver: local

  directus_uploads:
    driver: local
  directus_extensions:
    driver: local
  n8n_data:
    driver: local
  crontab_data:
    driver: local
  hoppscotch_data:
    driver: local
  postgres_data:
    driver: local
  api_www_data:
    driver: local
  monitor_www_data:
    driver: local
  mysql_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  traefik_data: # Volume pour stocker les certificats Traefik
    driver: local
  portainer_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: app-network
